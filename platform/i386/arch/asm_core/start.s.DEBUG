;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Copyright (C) Roger G. Doss. All Rights Reserved
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	@module
;		start.s
;
;	@description
;
;		The first entry point of the ox kernel
;	its task is to kick off execution, and start initializing
;	the system. The very first thing we do is initialize
;	the kernel's GDT and IDT, and load them into the 
;	approperiate registers.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  include files
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%include "common/macros.inc"
%include "common/cdef.inc"


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; external symbols
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
extern __GDT__				; protected_mode.c
extern __IDT__				; protected_mode.c
extern loadgdt              ; idt.c

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; external routines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
extern protect_init			; protected_mode.c
extern interrupt_init			; interrupt.c
extern main				; main.c
extern printk				; printk.c
extern asm_hlt				; util.s
extern debug_panic          ; panic.c

section data

; RGDDDEBUG
local_idt:
    resd 50*2

; RGDDEBUG
idtr:
    dw (50*8)-1
    dd local_idt

section text

; RGDDEBUG
int_handler:
    pushad
    mov dword [0xB8000],':-))'
    mov al,0x20
    out 0x20,al
    popad
    ret ; this is strange, ret works but not iret...

; _start:-
;	ox kernel assembly entry point, called
;	from the boot loader
C_ENTRY _start

    ; The below two statements are for debugging.
    ; call debug_panic      ; RGD
	; call asm_hlt			; stop  execution

	call protect_init		; set up GDT/IDT

	push dword 2
	popf				; clear EFLAGS
    ; RGDDEBUG
    ;lgdt [loadgdt]
	;mov word ax,0x10
	;mov word ds,ax
	;mov word es,ax
	;mov word ss,ax
	;mov word ax,0x10
	;mov word fs,ax
	;mov word gs,ax
    ; end RGDDEBUG
	lgdt	[__GDT__]		; load the GDT
	mov word ax,KERNEL_DS   ; set up for kernel data segment
	mov word ds,ax
	mov word es,ax
	mov word ss,ax
	mov word ax,USER_DS   ; set up for user data segment
	mov word fs,ax
	mov word gs,ax
	mov dword esp,0xFFFF		; stack at top of segment
	jmp continue			; clear pre-fetch queue
	nop
	nop
	continue:

	call interrupt_init		; set i8259 controller
	;lidt	[__IDT__]		; load the IDT
    ; RGDDEBUG
    lidt [idtr]
    mov eax,int_handler
    mov [local_idt+49*8],ax
    mov word [local_idt+49*8+2],KERNEL_CS
    mov word [local_idt+49*8+4],0x8E00
    shr eax,16
    mov [local_idt+49*8+6],ax
    int 49
    mov dword[0xB8000+4],'++++'
    hlt

	;pushf
	;and dword [esp],0xFFFFBFFF	; clear NT bit
	;popf				; reset flags

	call main			; call  main
	call asm_hlt			; stop  execution
	ret
;
; EOF
;
